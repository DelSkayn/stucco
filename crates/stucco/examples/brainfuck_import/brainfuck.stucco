stencil next(stack: usize, count: usize)
    variant
        imm count,
        slot stack,
{
    let stack = (stack as *mut usize).add(count);
    become next(stack as usize);
}
    
stencil previous(stack: usize, count: usize)
    variant
        imm count,
        slot stack,
{
    let stack = (stack as *mut usize).sub(count);
    become next(stack as usize);
}

stencil increment(stack: usize, by: usize)
    variant
        imm by,
        slot stack,
{
    let stack = (stack as *mut usize)
    stack.write(stack.read() + by);
    become next(stack as usize)
}

stencil decrement(stack: usize, by: usize)
    variant
        imm by,
        slot stack,
{
    let stack = (stack as *mut usize)
    stack.write(stack.read() - by);
    become next(stack as usize)
}

stencil put(stack: usize, write: fn(usize))
    variant
        imm write,
        slot stack,
{
    let stack = (stack as *mut usize)
    write(stack.read());
    become next(stack as usize)
}


stencil gets(stack: usize, read: fn() -> usize)
    variant
        imm read,
        slot stack,
{
    let stack = (stack as *mut usize)
    stack.write(read());
    become next(stack as usize)
}

stencil jump_forward(stack: usize)
    variant
        slot stack
{
    let stack = (stack as *mut usize)
    if stack.read() == 0 {
        become forward(stack as usize)
    }
    become next(stack as usize)
}


stencil jump_backward(stack: usize)
    variant
        slot stack
{
    let stack = (stack as *mut usize)
    if stack.read() != 0 {
        become backward(stack as usize)
    }
    become next(stack as usize)
}

stencil halt(stack: usize)
    variant
        slot stack
{
    return;
}

